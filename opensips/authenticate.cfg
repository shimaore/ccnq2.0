
route[authenticate]
{
  if(is_method("INVITE") || is_method("SUBSCRIBE") || is_method("NOTIFY"))
  {
      if(!allow_trusted()) # Note: INVITE also adds allow_source_address("2") and allow_source_address("0")
      {
          route(13); # Authenticate customer
      }
  }
}

# -----------------------------------------------------------------
# UAC Authentication (customer-side, "untrusted")
# -----------------------------------------------------------------

route[13]
{
    xlog("L_DBG","DEBUG -- route(13): Customer device from $si");

    # Check whether this is a customer-side trunk (S2S).
    if(!avp_db_load("$si","$(avp(src_subs))"))
    {
        xlog("L_DBG","DEBUG -- route(13): Authorizing source $si");

#IFAUTHRADIUS   if (!radius_proxy_authorize("${CHALLENGE}"))
#IFAUTHRADIUS   {
#IFAUTHRADIUS       proxy_challenge("${CHALLENGE}","0");
#IFAUTHRADIUS       exit;
#IFAUTHRADIUS   }

#IFAUTHDB       if (!proxy_authorize("${CHALLENGE}","subscriber"))
#IFAUTHDB       {
#IFAUTHDB           proxy_challenge("${CHALLENGE}","0");
#IFAUTHDB           exit;
#IFAUTHDB       }

        consume_credentials();

        if (!check_from())
        {
            sl_send_reply("403", "Use From=Authentication-ID");
            exit;
        }

        $(avp(src_subs)) = $fU;
    }

    xlog("L_DBG","DEBUG -- route(13): Customer device $(avp(src_subs)) with account $(avp(account)).");
}

route[authenticate_register]
{
  #IFAUTHRADIUS   if (!radius_www_authorize("${CHALLENGE}")) {
  #IFAUTHRADIUS       xlog("L_DBG", "route(2) -- Device $si ($fu) failed to register");
  #IFAUTHRADIUS       www_challenge("${CHALLENGE}","0");
  #IFAUTHRADIUS       return;
  #IFAUTHRADIUS   };

  #IFAUTHDB       if (!www_authorize("${CHALLENGE}","subscriber"))
  #IFAUTHDB       {
  #IFAUTHDB           xlog("L_DBG", "route(2) -- Device $si ($fu) failed to register");
  #IFAUTHDB           www_challenge("${CHALLENGE}","0");
  #IFAUTHDB           return;
  #IFAUTHDB       };

  consume_credentials();
}

# Syntax:
#  www_authorize(realm,sqltable) -- for user credentials (in REGISTER)
#  www_challenge(realm,qop)
#  proxy_authorize(realm,sqltable) -- require digest in INVITE
#  proxy_challenge(realm,qop)

