# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[invite-handler]
{
    xlog("L_DBG","DEBUG -- route(invite-handler) $ru -- INVITE Message Handler");

    sl_send_reply("100", "Trying");

    t_on_failure("1");
    t_on_reply("1");

    xlog("L_DBG","DEBUG -- route(invite-handler): From ip: $si - From URI: $fu");

    route(pre-route-invite);
    route(route-invite);
    route(mid-route-invite);

    route(try-line-side);
    route(try-trunk-side);

    # Invalid destination
    sl_send_reply("404", "User Not Found");
    exit;
}

# Route towards line-side
route[line-side-invite]
{
    xlog("L_DBG","DEBUG -- route(line-side-invite) Routing to line-side");

    # If CFA is enabled, go that way
    if( $(avp(cfa)) )
    {
        xlog("L_DBG","DEBUG -- CFA = $(avp(cfa))");

        # CFA AVP is a full URI
        $ru = $(avp(cfa));
        # Note: we can't do NAT detection on a CFA
        route(update-media-proxy);   # Start MP if needed
        route(forwarder);
        exit;
    }

    # Save the original username in case we need it.
    $var(a) = $rU;

    # Use the regular destination username
    # NumUser AVP only gives the username.
    $rU = $(avp(dst_subs));

    # Locate the username if available (REGISTERed).
    route(lookup);

    # This is going to one of our users, ring them.
    route(update-media-proxy);   # Start MP if needed
    route(forwarder);
    exit;
}

route[pre-route-invite]
{
  # -- Provider-side (top)
  if (allow_trusted())
  {
      # A trusted device is a provider-side trunk, including a local gateway (S2S).
      $(avp(src_type)) = "PSTN";
  }
  # -- Customer-side
  else
  if($(avp(src_subs)))
  {
      $(avp(src_type)) = "ONNET";

      if( (! isflagset(16))
           && avp_db_load("$(avp(src_subs))","$(avp(user_recording))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Recording at $(avp(user_recording))");
          setflag(16);
          $(avp(dest_domain)) = $(avp(user_recording));
      }
      if( avp_db_load("$(avp(src_subs))","$(avp(user_force_mp))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Force MediaProxy for $(avp(src_subs))");
          setflag(7); # force MP for caller
          add_rr_param(";mp=yes");
      }

      avp_db_load("$(avp(src_subs))","$(avp(account))");

      xlog("L_DBG","DEBUG -- route(invite-handler): Customer device $(avp(src_subs)) with account $(avp(account)).");
  }
}


# Route $(avp(gwadv)) to its final destination
route[trunk-side-invite]
{
    xlog("L_DBG","DEBUG -- route(trunk-side-invite) Routing gwadv $(avp(gwadv))");

    # If we have a node-id, first try to locate a route specific to this node.
    # The AVP key is the route name followed by '/' then the node_id.
#IF_USE_NODE_ID $var(local_route) = $(avp(gwadv)) + '/${NODE_ID}';
#IF_USE_NODE_ID if( ! avp_db_load("$var(local_route)","$(avp(tgw))") )
#IF_USE_NODE_ID {

    # Find the generic target ip:port for this route
    if( ! avp_db_load("$(avp(gwadv))","$(avp(tgw))") )
    {
        return(-1);
    }

#IF_USE_NODE_ID }

    xlog("L_DBG","DEBUG -- route(trunk-side-invite) Location $(avp(tgw))");

    t_on_branch("1");
    return(1);
}

branch_route[1]
{
    xlog("L_DBG","DEBUG -- branch_route(forwarder) Processing $rm $ru");

    xlog("L_DBG","DEBUG -- branch_route(forwarder) Routing tgw $(avp(tgw))");

    # Modify the RURI to use the new target.
    $ru = "sip:" + $rU + "@" + $(avp(tgw));

    # Per-provider authentication
    avp_db_load("$(avp(tgw))","$(avp(uac_realm))"); # Must match the realm sent by the remote end
    avp_db_load("$(avp(tgw))","$(avp(uac_user))");
    avp_db_load("$(avp(tgw))","$(avp(uac_pass))");
}


onreply_route[1]
{
  xlog("L_DBG","DEBUG -- onreply_route(forwarder) Received from $si with flags $mf: $mb");
  xlog("L_DBG","DEBUG -- onreply_route(forwarder) $rs $rr");

  # In-progress flag
  if( t_check_status("[12][0-9][0-9]") )
  {
      setbflag(18);
  }

  route(media-proxy-reply-handler); # MP on-reply
  route(onreply-nat); # NAT on-reply
}

