# failure_route.cfg -- shared failure_route for INVITE messages
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# Failure route
# -----------------------------------------------------------------

failure_route[1]
{
    xlog("L_DBG","DEBUG -- failure_route(forwarder): $rm $ru");

    if(!is_method("INVITE"))
    {
      return;
    }

    # For fax negotiation 488 might be a normal outcome.
    if(!t_check_status("488"))
    {
      route(stop-media-proxy); # End media session
    }

    if(t_was_cancelled() || t_check_status("504"))
    {
        xlog("L_DBG","DEBUG -- failure_route[1]: conversation was canceled.");
    }
    else
    {
        if($avp(uac_realm))
        {
          # Check whether we were supposed to authenticate (uac_auth)
          if( t_check_status("40[17]") )
          {
              # Already attempted.
              # Note: this breaks if we failover (e.g. SRV or multiple DNS As)
              if(isbflagset(11))
              {
                  xlog("L_DBG","DEBUG -- failure_route(forwarder): uac_auth already attempted.");
                  t_reply("503","Authentication failed");
                  exit;
              }

              xlog("L_DBG","DEBUG -- failure_route(forwarder): Attempting uac_auth.");
              if(uac_auth())
              {
                  setbflag(11);
                  t_on_failure("1");
                  route(initial-forwarder);
                  exit;
              }
              else
              {
                  xlog("L_ERR","ERROR -- failure_route(forwarder): uac_auth() failed on $rm $ru");
                  exit;
              }
          }
        }

        resetbflag(11);

        # Handle redirects
        if( t_check_status("302") )
        {
            get_redirects("6:2","Redirected"); # max_total:max_branch, reason
            append_branch();
            route(forwarder);
            exit;
        }

        # Process failure cases
        if (next_branches()) {
            route(forwarder);
            exit;
        }

        # Line-side processing
        if( $(avp(dst_subs)) ) {
            xlog("L_DBG","DEBUG -- failure_route(forwarder): line-side failure route");

            # On 486 Busy Here use CFB
            # Note: For 480, using CFNR may be more appropriate.
            if( t_check_status("48[067]") )
            {
                xlog("L_DBG","DEBUG -- failure_route(forwarder): Attempting CFB");

                # Locate the CFB AVP, and use it if we haven't already
                if( $(avp(cfb)) && !isbflagset(9) )
                {
                    xlog("L_DBG","DEBUG -- failure_route(forwarder): Applying CFB");
                    setbflag(9);

                    # Replace the Request-URI with the CFB target
                    $ru = $(avp(cfb));
                    # Append a new branch based on the CFB and route it out.
                    append_branch();
                    route(initial-forwarder);
                    exit;
                }
                # Fallthrough
            }

            # See if we need to CFDA
            # Locate the CFDA AVP
            xlog("L_DBG","DEBUG -- Attempting CFDA");
            if( $(avp(cfda)) && !isbflagset(10) )
            {
                xlog("L_DBG","DEBUG -- failure_route(forwarder): Applying CFDA");
                setbflag(10);

                # Replace the Request-URI with the CFDA target
                $ru = $(avp(cfda));
                # Append a new branch based on the CFDA and route it out.
                append_branch();
                route(initial-forwarder);
                exit;
            }
            # Fallthrough: no alternate found, fail the call.
        }

        if($(avp(gwadv))) {
        # Trunk-side processing
            # Don't failover on busy, loop detected, incomplete address, or not found
            # Note: 480 used to be here but since it is used as catch-all by FS it is better to progress on it.
            if( t_check_status("48[67241]|40[34]|60[0-9]") )
            {
                xlog("L_DBG","DEBUG -- failure_route(forwarder): trunk: no progress on busy, loop, incomplete, forbidden, not found");
                return;
            }
            # Ring no Answer
            if( isbflagset(18) && t_check_status("408") )
            {
                xlog("L_DBG","DEBUG -- failure_route(forwarder): trunk: no answer");
                t_reply("486","No Answer");
                return;
            }

            # Attempt to find a failover endpoint
            if( avp_db_load( "$(avp(gwadv))", "$(avp(gwadv))" ) )
            {
                xlog("L_DBG","DEBUG -- failure_route(forwarder): route advance to $(avp(gwadv))");
                route(trunk-side-invite);
                append_branch();
                route(initial-forwarder);
                exit;
            }
            else
            {
                # This is a normal scenario for the last entry in a route-set
                xlog("L_DBG","DEBUG -- failure_route(forwarder): no route advance for $(avp(gwadv))");

                # Try aliases as a fallback.
                if(alias_db_lookup("aliases"))
                {
                    xlog("L_DBG","DEBUG -- failure_route(forwarder): using alias $ru");
                    append_branch();
                    route(initial-forwarder);
                    exit;
                }
                else
                {
                    xlog("L_DBG","DEBUG -- failure_route(forwarder): no alias either, terminating the call.");
                }
            }
            # Fallthrough: no alternate found
        }
    }
}
