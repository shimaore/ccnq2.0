# invite-outbound-proxy.cfg -- INVITE handler for an outbound-proxy
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#define USE_DROUTING
#define SKIP_LINESIDE
#define SKIP_GWADV

route[invite-handler]
{
    xlog("L_DBG","DEBUG -- route(invite-handler) $ru -- INVITE Message Handler (Outbound Proxy)");

    sl_send_reply("100", "Trying");

    t_on_failure("1");
    t_on_reply("1");

    xlog("L_DBG","DEBUG -- route(invite-handler): From ip: $si - From URI: $fu");

    # Need to be able to route based on:
    # - calling number + called number
    # - called number
    # - calling number
    # For the outbound-proxy, needs to be able to do LCR.
    # See http://www.opensips.org/html/docs/modules/1.5.x/drouting.html

    do_routing();
    if(next_routing())
    {
      route(update-media-proxy);  # Start MP if needed
      route(initial-forwarder);   # Forward
      exit;
    }
    else
    {
      # Invalid destination
      sl_send_reply("404", "User Not Found");
      exit;
    }
}

# Route $(avp(gwadv)) to its final destination
route[trunk-side-invite]
{
    xlog("L_DBG","DEBUG -- route(trunk-side-invite) Routing gwadv $(avp(gwadv))");

#ifnotdef SKIP_GWADV
    # If we have a node-id, first try to locate a route specific to this node.
    # The AVP key is the route name followed by '/' then the node_id.
#IF_USE_NODE_ID $var(local_route) = $(avp(gwadv)) + '/${NODE_ID}';
#IF_USE_NODE_ID if( ! avp_db_load("$var(local_route)","$(avp(tgw))") )
#IF_USE_NODE_ID {

    # Find the generic target ip:port for this route
    if( ! avp_db_load("$(avp(gwadv))","$(avp(tgw))") )
    {
        return(-1);
    }

#IF_USE_NODE_ID }

    xlog("L_DBG","DEBUG -- route(trunk-side-invite) Location $(avp(tgw))");
#endifnotdef SKIP_GWADV

    t_on_branch("1");
    return(1);
}

