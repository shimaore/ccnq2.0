# Copyright (C) 2009-2010  Stephane Alnet
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# These instructions are for Debian/Lenny.
#
# I assume you use sudo to gain root access.
#

# This file is a series of shell code fragments.
# Each command starts two spaces from the left column.

# * Update apt's sources.list to import the "testing" distribution
#   (needed for some packages on the API and MediaProxy servers):

  grep 'testing' /etc/apt/sources.list || cat <<'EOT' | sudo tee -a /etc/apt/sources.list > /dev/null
# Testing packages required by CCNQ2.0 for Erlang/CouchDB, MediaProxy
deb     http://ftp.us.debian.org/debian/   testing main contrib
EOT

  grep 'testing' /etc/apt/preferences || cat <<'EOT' | sudo tee /etc/apt/preferences > /dev/null
#
# Install Debian/Lenny packages by default
#
Package: *
Pin: release a=lenny
Pin-Priority: 700
#
# Although testing is available, do not attempt to automatically upgrade to it.
#
Package: *
Pin: release a=testing
Pin-Priority: -1
EOT

  sudo aptitude update
  sudo aptitude -y dist-upgrade


# * Note: I've noticed that Lenny installs a /etc/rsyslog.conf which creates /var/log/user.log,
# but it never gets cleaned up. I recommend:

  sudo mv /etc/rsyslog.conf /etc/rsyslog.conf.bak
  cat <<'EOT' | sudo tee /etc/rsyslog.conf >/dev/null
$ModLoad imuxsock # provides support for local system logging
$ModLoad imklog   # provides kernel logging support (previously done by rklogd)
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
auth,authpriv.*                 /var/log/auth.log
*.*;auth,authpriv.none          -/var/log/syslog
EOT
  sudo /etc/init.d/rsyslog reload

# * Note: for high performance, the directory /opt/freeswitch/db must be
# in memory.
   grep '/opt/freeswitch/db' /etc/fstab || \
   (echo 'fsdbfs /opt/freeswitch/db tmpfs defaults 0 0' | sudo tee -a /etc/fstab >/dev/null)

# * On all servers, install the program:
#
  sudo aptitude update
  sudo aptitude -y install ntp monit psmisc build-essential git-core
  # Perl modules in testing have proper versions (the ones in Lenny might not).
  sudo aptitude -y install -t testing \
     libdatetime-perl libdatetime-locale-perl libanyevent-perl libasync-interrupt-perl libauthen-sasl-perl libcache-memcached-perl libcgi-untaint-email-perl libcgi-untaint-perl libclass-inspector-perl libcommon-sense-perl libcrypt-cbc-perl libdata-dump-perl libdata-dump-streamer-perl libdata-structure-util-perl libdbi-perl libdigest-hmac-perl libdigest-sha1-perl libemail-valid-perl libexpat-dev libhttp-server-simple-perl libhttp-server-simple-psgi-perl libio-all-perl libio-string-perl libio-stringy-perl libjson-perl libjson-xs-perl liblingua-en-numbers-ordinate-perl liblocale-maketext-lexicon-perl liblogger-syslog-perl libmailtools-perl libmime-types-perl libmodule-install-perl libnet-dns-perl libnet-ip-perl libnet-libidn-perl libnet-ssleay-perl libobject-event-perl libparams-util-perl libstring-crc32-perl libtest-deep-perl libtest-simple-perl libuniversal-require-perl liburi-perl libwww-perl libxml-parser-perl libxml-writer-perl libyaml-perl

  # Now add non-Debian Perl modules.
  # Manual instructions are in doc/INSTALL.perl
  # ------ Equivalent (from our servers): ------------
  ARCH=amd64
  (mkdir /tmp/perl && cd /tmp/perl && \
    wget http://opensource.sotelips.net/~stephane/perl/all-${ARCH}.tar.gz && \
    tar xzvf all-${ARCH}.tar.gz && \
    for file in *.deb; do echo "Installing $file"; sudo dpkg -i $file; done && \
    rm *.deb all-${ARCH}.tar.gz && cd && rmdir /tmp/perl && echo "Done." )

  # Download the latest release of the code
  mkdir -p ~/src && (cd ~/src && git clone git://github.com/stephanealnet/ccnq2.0.git)

  # Build the Perl modules and install them
  (cd ~/src/ccnq2.0/common/perllib && perl Makefile.PL && make && make test && sudo make install)
  # Alternatively, use   "dh-make-perl --build"   to build proper packages, then install them.

# * On the manager server, the portal server, an API server, the CDR server, the bucket server, and the client-side SBCs:

  # The manager server takes generic Requests and splices them into per-server Activities.
  # It uses CouchDB to store the Requests & Activities.
  # The portal server uses a CouchDB database to store information about portal users.
  # An API server uses local CouchDB databases (provisioning, billing) for data queries.
  # Client-side SBCs use a local CouchDB database (billing) to rate CDRs for storage.
  # The CDR server uses a local CouchDB database for storage of rated CDRs.
  # The bucket server uses a local CouchDB database for storage of bucket data.

  # CouchDB 0.10.1. is now in Debian/testing
  sudo aptitude install -y -t testing couchdb

  # In /etc/couchdb/local.ini, replace the line that reads:
  #    ;loglevel = warn
  # with
  #    loglevel = error
  # to avoid filling the disk with log messages.
  sudo sed -i -e 's/^;level = .*$/level = error/' /etc/couchdb/local.ini

  # Also, importantly, you MUST allow remote access to the "cdr" and "bucket" databases.
  # So on the cdr and bucket couchdb servers, assuming LOCAL_IP is the local IP to use:
  export LOCAL_IP=192.168.1.xxx
  sed -i -e "s/;bind_address = 127.0.0.1/bind_address = $LOCAL_IP/" /etc/couchdb/local.ini
  echo $LOCAL_IP | tee /etc/ccn/couchdb_local_server >/dev/null

# * On the proxy servers:

  # Install OpenSIPS (note: we provide "amd64" and "i386"-type Debian packages only)
  cd ~/src
  OPENSIPS=1.5.3-0
  sudo aptitude install -y libmysqlclient15off mysql-client
  wget http://opensource.sotelips.net/~stephane/${ARCH}/opensips_${OPENSIPS}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/opensips-mysql-module_${OPENSIPS}_${ARCH}.deb
  sudo dpkg -i opensips_${OPENSIPS}_${ARCH}.deb
  sudo dpkg -i opensips-mysql-module_${OPENSIPS}_${ARCH}.deb

  sudo aptitude install -y mysql-server
  # (leave the MySQL root password empty -- you'll be asked four times)
  # Also I do:
  sudo aptitude --purge remove portmap fam
  sudo aptitude install -y postfix  # remove exim4


  # Install MediaProxy dispatcher (if using MediaProxy)
  sudo aptitude install -y python python-support libnetfilter-conntrack1 python-cjson python-twisted-core python-twisted-names python-zopeinterface
  # Versions required for mediaproxy-common include python-application (>= 1.1.5) and python-gnutls (>= 1.1.8) which are not in Debian/Lenny
  sudo aptitude install -y python-application/testing python-gnutls/testing
  cd ~/src
  MEDIAPROXY=2.4.2
  ARCH=amd64
  wget http://opensource.sotelips.net/~stephane/${ARCH}/mediaproxy-common_${MEDIAPROXY}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/mediaproxy-dispatcher_${MEDIAPROXY}_all.deb
  sudo dpkg -i mediaproxy-common_${MEDIAPROXY}_${ARCH}.deb
  sudo dpkg -i mediaproxy-dispatcher_${MEDIAPROXY}_all.deb

  # Also make sure that the user which will be running xmpp_agent.pl is a member of the "opensips" group.
  # (This is required so that xmpp_agent.pl can get access to the OpenSIPS FIFO.)
  # The following command adds the current user to group "opensips":
  sudo adduser `whoami` opensips

# * On the mediaproxy relay servers (the ones doing RTP/UDPTL redirection):

  # Install MediaProxy relay
  sudo aptitude install python python-support libnetfilter-conntrack1 python-cjson python-twisted-core python-twisted-names python-zopeinterface
  # Versions required for mediaproxy-common include python-application (>= 1.1.5) and python-gnutls (>= 1.1.8) which are not in Debian/Lenny
  sudo aptitude install python-application/testing python-gnutls/testing
  cd ~/src
  wget http://opensource.sotelips.net/~stephane/${ARCH}/mediaproxy-common_${MEDIAPROXY}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/mediaproxy-relay_${MEDIAPROXY}_all.deb
  sudo dpkg -i mediaproxy-common_${MEDIAPROXY}_${ARCH}.deb
  sudo dpkg -i mediaproxy-relay_${MEDIAPROXY}_all.deb

  # Also make sure to enable IP forwarding
  sudo sed -i -e 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
  echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward >/dev/null

# * On the SBC servers:

  # Install FreeSwitch

  sudo aptitude -y install unixodbc libasound2 libcurl3 libvorbis0a
  sudo aptitude -y install libcrypt-ssleay-perl  # for CNAM

  cd ~/src
  FREESWITCH=1.0.6-git20100812
  ARCH=amd64
  wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch_${FREESWITCH}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch-lang-en_${FREESWITCH}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch-perl_${FREESWITCH}_${ARCH}.deb
  wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch-lua_${FREESWITCH}_${ARCH}.deb
  # wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch-sounds-en-us-callie-8000_${FREESWITCH}_${ARCH}.deb
  # wget http://opensource.sotelips.net/~stephane/${ARCH}/freeswitch-codec-passthru-g729_${FREESWITCH}_${ARCH}.deb


  sudo dpkg -i freeswitch_${FREESWITCH}_${ARCH}.deb
  sudo dpkg -i freeswitch-lang-en_${FREESWITCH}_${ARCH}.deb
  sudo dpkg -i freeswitch-perl_${FREESWITCH}_${ARCH}.deb   # CNAM, currently
  sudo dpkg -i freeswitch-lua_${FREESWITCH}_${ARCH}.deb
  # sudo dpkg -i freeswitch-sounds-en-us-callie-8000_${FREESWITCH}_${ARCH}.deb
  # sudo dpkg -i freeswitch-codec-passthru-g729_${FREESWITCH}_${ARCH}.deb

  # Important: move the original configuration files out of the way.
  sudo mv /opt/freeswitch/conf /opt/freeswitch/conf.orig

  # Also make sure that the user which will be running xmpp_agent.pl is a member of the "daemon" group.
  # (This is required so that xmpp_agent.pl can get access to the FreeSwitch CLI and FIFO.)
  # The following command adds the current user to group "daemon":
  sudo adduser `whoami` daemon

# * If you intent to use the "sip-traces" API (you should), run the following on any server that will handle SIP traffic:

  sudo aptitude install -y -t testing libpam-runtime   # dependency issue as of 2010/08
  sudo aptitude install -y -t testing tshark ngrep

# * Finally:

  # Install /etc/ccn/cookie
  sudo mkdir /etc/ccn
  [ -e /etc/ccn/cookie ] || hexdump -C /dev/urandom | head -1 | md5sum | sudo tee /etc/ccn/cookie > /dev/null

  # Monitor /var/log/syslog to see any errors.
  sudo tail -f /var/log/syslog &

  # ------------------------------------------------------------
  # At this point you should get your DNS configuration ready.
  # (We're still missing proper documentation on this. :( )
  # ------------------------------------------------------------

  # Then run:
  sudo ccnq2_upgrade

  # Monitor syslog during the execution of the script to know what to do next.
  # If syslog shows no line containing the word "error" then you should be OK.

# * Note: For upgrades, run:

  # Install the updated modules
  (cd ~/src/ccnq2.0 && git pull)
  (cd ~/src/ccnq2.0/common/perllib && perl Makefile.PL && make && make test && sudo make install)

  # Upgrade the configuration(s) as needed
  sudo ccnq2_upgrade

  #-> The ccnq2_upgrade_all contrib script can be used from a management server
  #   to upgrade multiple servers at once.

# * On the proxies:

  # Part of the syslog information (during ccnq2_upgrade) asks to run some MySQL commands to initialize the database.
  # Typically these are equivalent to:
  sudo mysql <<SQL
    CREATE DATABASE opensips;
    CONNECT opensips;
    CREATE USER opensips IDENTIFIED BY 'opensips';
    GRANT ALL ON opensips.* TO opensips;
SQL
  # Run this AFTER ccnq2_upgrade, otherwise /etc/opensips/opensips.sql will not be present.
  sudo /bin/sh -c 'mysql opensips < /etc/opensips/opensips.sql'


# * On B2BUAs:

  # ACL updates
  # As appropriate, review
  # /opt/freeswitch/conf/autoload_configs/client-sbc-config.acl.xml
  # to add your proxies' IP addresses.

# * Using the manager process (this will be rewritten once we have a proper installer):

  # The connection to the jabber server(s) is done using the xmpp_agent.pl script:

  ccnq2_xmpp_agent

  # Please monitor /var/log/syslog for the connection information:
  #   Creating XMPP Connection for <host_name>@<domain_name>/.../... using password <password>.
  # and add a user <host_name> with password <password> in your jabber server.
  #-> To do this use the ejabberctl command:
  #   sudo /usr/sbin/ejabberdctl register <host_name> <domain_name> <password>

  # Try again. This time the user should connect properly.
  ccnq2_xmpp_agent &

  # The "API" and "Manager" servers are functions inside the xmpp_agent tool which
  # are automatically started on "api" and "manager" nodes.

  # IMPORTANT: The user which is running xmpp_agent.pl MUST BE a member of the following groups:
  #
  #     opensips   (for access to the OpenSIPS FIFO)
  #     daemon     (for access to the FreeSwitch CLI / FIFO)
  #

  #-> The ccnq2_xmpp_restart_all contrib script can be used from a management server
  #   to restart the XMPP agent on multiple servers.

# * On the Portal server(s):

  # On the web portal server, you should also do:
  sudo aptitude -t testing install libtemplate-perl libnet-ldap-perl libpdf-api2-simple-perl libdata-uuid-perl libnumber-format-perl
  sudo aptitude -t testing install libplack-perl # Used by the webserver starter (plackup)
  sudo aptitude install memcached unzip

  # Install the "portal" modules
  (cd ~/src/ccnq2.0/portal/perllib && perl Makefile.PL && make && make test && sudo make install)
  # Alternatively use  dh-make-perl --build

# * Jabber server configuration:
  sudo aptitude -y install -t testing ejabberd
  #   On ejabberd I change the "default" shaper to accept much higher rates:
  sed -i -e 's/^{shaper, normal, {maxrate, 1000}}\./{shaper, normal, {maxrate, 1000000}}./' /etc/ejabberd/ejabberd.cfg
  #   Also, some clients might have more than 10 connections at a time.
  sed -i -e 's/^{access, max_user_sessions, \[{10, all}\]}\./{access, max_user_sessions, [{20, all}]}./' /etc/ejabberd/ejabberd.cfg

# These instructions were last test 2010/08/18.
