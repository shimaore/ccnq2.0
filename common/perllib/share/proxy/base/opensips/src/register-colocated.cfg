# register-colocted.cfg -- REGISTER handler for a colocated registrar
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# REGISTER Message Handler: Router and registrar co-located
# -----------------------------------------------------------------

# Router and registrar are co-located

route[record-route]
{
  # REGISTER messages are processed locally.
  # For all other messages, make sure we stay in the path.
  if ( !is_method("REGISTER") )
  {
    record_route();
  };
}

route[register-handler]
{
    xlog("L_DBG","DEBUG -- route(register-handler): REGISTER Message Handler from $source_uri");

    route(register-nat);

    if(!allow_trusted())
    {
      route(authenticate_register);

      if (!check_to())
      {
        xlog("L_WARN", "WARNING -- route(register-handler): Rogue device $si ($fu) attempts to register");
        sl_send_reply("401", "Unauthorized");
        exit;
      };
    }

    if( !save("location") )
    {
        xlog("L_ERR", "ERROR -- route(register-handler): could not save location $si ($fu).");
        sl_send_reply("500", "Could not save location");
    }
    exit;
}

# Co-located

route[lookup]
{
  xlog("L_DBG","DEBUG -- route(lookup): Lookup $ru");

  lookup("location");
  $var(code) = $retcode;

  xlog("L_DBG","DEBUG -- route(lookup): Lookup $ru returned $var(code)");
  switch ($var(code)) {
      case 1:
        xlog("L_DBG","DEBUG -- route(lookup): Contact $ru found");
        break;

      # Contact found, method not supported.
      case -2:
        xlog("L_DBG","DEBUG -- route(lookup): Contact $ru found, method not supported.");
        sl_send_reply("405", "Not Found");
        exit;
        break;

      # No contact found
      case -1:
      # Internal error
      case -3:
        route(static-line-side);
        break;
  };
}