# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[invite-handler]
{
    xlog("L_DBG","DEBUG -- route(invite-handler) $ru -- INVITE Message Handler");

    sl_send_reply("100", "Trying");

    t_on_failure("1");
    t_on_reply("1");

    xlog("L_DBG","DEBUG -- route(invite-handler): From ip: $si - From URI: $fu");

    route(lookup-src);

    # Lookup emergency location based on calling number, if available.
    avp_db_load("$fU","$(avp(number_location))");

    route(try-line-side);
    route(try-trunk-side);

    # Invalid destination
    sl_send_reply("404", "User Not Found");
    exit;
}

route[lookup-src]
{
  # -- Provider-side (top)
  if (allow_trusted())
  {
      # A trusted device is a provider-side trunk, including a local gateway (S2S).
      $(avp(src_type)) = "PSTN";
  }
  # -- Line-side
  else
  if($(avp(src_subs)))
  {
      $(avp(src_type)) = "ONNET";

      if( (! isflagset(16))
           && avp_db_load("$(avp(src_subs))","$(avp(dest_domain))") )
      {
          setflag(16);
      }
      if( avp_db_load("$(avp(src_subs))","$(avp(user_force_mp))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Force MediaProxy for $(avp(src_subs))");
          setflag(7); # force MP for caller
          add_rr_param(";mp=yes");
      }
      if( avp_db_load("$(avp(src_subs))","$(avp(check_from))") )
      {
          $var(caller_key) = $avp(src_subs) + ',' + $fU;
          xlog("L_DBG","DEBUG -- route(invite-handler): Checking From username for $var(caller_key)");
          if( !avp_db_load("$var(caller_key)","$(avp(valid_from))") ) {
            sl_send_reply("404", "From Username is not listed");
            exit;
          }
      }

      # Account headers
      avp_delete("$(avp(account))");
      avp_delete("$(avp(account_sub))");

      # If the source is a trusted SBC then they must provide us with RURI parameters
      # that contain the account and account_sub, similar to what we send out in
      # the "initial-forwarder" route.
      # Otherwise we locate the account and account_sub based on the src_subs.
      if($(avp(forwarding_sbc)) == "2") {
        $avp(account)     = $(ru{uri.param,account});
        $avp(account_sub) = $(ru{uri.param,account_sub});
      }
      else
      if(avp_db_load("$(avp(src_subs))","$(avp(account))")) {
        avp_db_load("$(avp(src_subs))","$(avp(account_sub))");
      }
      #/ Account headers

      # Subscriber/endpoint-specific outbound routing
      avp_db_load("$(avp(src_subs))","$(avp(user_outbound_route))");
      avp_db_load("$(avp(src_subs))","$(avp(ignore_caller_outbound_route))");
      avp_db_load("$(avp(src_subs))","$(avp(ignore_default_outbound_route))");
      if( avp_db_load("$(avp(src_subs))","$(avp(src_disabled))") ) {
        sl_send_reply("403", "Administratively Forbidden");
        exit;
      }

      # Subscriber/endpoint location information
      avp_db_load("$(avp(src_subs))","$(avp(user_location))");

      xlog("L_DBG","DEBUG -- route(invite-handler): Customer device $(avp(src_subs)) with account $(avp(account)).");
  }
}
