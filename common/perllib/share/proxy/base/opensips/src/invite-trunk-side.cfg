# invite-trunk-side.cfg -- Failover using drouting
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[trunk-side-invite]
{
    xlog("L_DBG","DEBUG -- route(trunk-side-invite)");

    # We may now have the following options:
    # - a route group provided by the src_subs
    if( ($(avp(user_outbound_route))            && do_routing("$(avp(user_outbound_route))"))
    # - a route group provided by the From
     || (!$(avp(ignore_caller_outbound_route))  && do_routing())
    # - a (cluster-wide) default route group
     || (!$(avp(ignore_default_outbound_route)) && do_routing("0")) )
    {
      # Force send through
      ${FORCE_INTERNAL}

      # XXX FIXME remove any "transport=" params from the RURI

      xlog("L_DBG","DEBUG -- route(invite-handler): do_routing was successful");
      setflag(22);
      t_on_branch("1");
      route(trunk-attributes);
      route(update-media-proxy);  # Start MP if needed
      route(initial-forwarder);   # Forward
      exit;
    }
}

route[trunk-attributes]
{
  xlog("L_DBG","DEBUG -- route(trunk-attributes)");
  if($(avp(dr_attrs){param.value,force_mp})) {
    xlog("L_DBG","DEBUG -- route(trunk-attributes) -- forcing MediaProxy for route");
    setflag(6); # force MP for callee
    add_rr_param(";mp=yes");
  }
  #ifnotdef SKIP_UAC_AUTH
  # Per-provider authentication
  xlog("L_DBG","DEBUG -- route(trunk-attributes) -- gathering authentication");
  $(avp(uac_realm)) = $(avp(dr_attrs){param.value,realm});
  $(avp(uac_user))  = $(avp(dr_attrs){param.value,user});
  $(avp(uac_pass))  = $(avp(dr_attrs){param.value,pass});
  #endifnotdef SKIP_UAC_AUTH

}

branch_route[1]
{
    xlog("L_DBG","DEBUG -- branch_route(1) Processing $rm $ru");
}
