# invite-trunk-side.cfg -- Failover using drouting
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[trunk-side-invite]
{
    xlog("L_DBG","DEBUG -- route(trunk-side-invite)");

    # Try the user-specific group first, otherwise fallback to default "0" group.
    if(do_routing() || do_routing("0"))
    {
      # Force send through
      ${FORCE_INTERNAL}

      xlog("L_DBG","DEBUG -- route(invite-handler): do_routing was successful");
      setflag(22);
      t_on_branch("1");
      route(update-media-proxy);  # Start MP if needed
      route(initial-forwarder);   # Forward
      exit;
    }
}

branch_route[1]
{
    xlog("L_DBG","DEBUG -- branch_route(1) Processing $rm $ru");

    #ifnotdef SKIP_UAC_AUTH
    # Per-provider authentication
    avp_db_load("uac","$(avp(uac_realm))"); # Must match the realm sent by the remote end
    avp_db_load("uac","$(avp(uac_user))");
    avp_db_load("uac","$(avp(uac_pass))");
    #endifnotdef SKIP_UAC_AUTH
}
