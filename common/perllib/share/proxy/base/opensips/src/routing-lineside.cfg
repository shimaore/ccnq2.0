# routing-lineside.cfg -- INVITE handler for line-side (customer) termination
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

route[try-line-side]
{
  xlog("L_DBG","DEBUG -- route(try-line-side): Attempting to locate $ru");
  # Attempt to find a local number first (line-side).
  if( avp_db_load("$ru","$(avp(dst_subs))") )
  {
      $(avp(dst_type)) = "ONNET";
      avp_db_load("$ru","$(avp(dst_domain))");

      avp_db_load("$ru","$(avp(cfa))");
      avp_db_load("$ru","$(avp(cfb))");
      avp_db_load("$ru","$(avp(cfda))");
      avp_db_load("$ru","$(avp(cfnr))");
      avp_db_load("$ru","$(avp(inv_timer))");

      # Now we switch to the target domain.
      xlog("L_DBG","DEBUG -- route(try-line-side): Switching to target domain $(avp(dst_domain))");
      $rd = $(avp(dst_domain));
      $rp = ""; # Clear port


      xlog("L_DBG","DEBUG -- route(try-line-side): dst_subs: $(avp(dst_subs)) account: $(avp(account))");

      # Note: flag 16 prevents sending twice (in the unlikely event that both
      #       caller and callee need to be recorded).
      if( (! isflagset(16))
          && avp_db_load("$(avp(dst_subs))","$(avp(dest_domain))") )
      {
          setflag(16);
      }

      xlog("L_DBG","DEBUG -- route(try-line-side): dst_subs: $(avp(dst_subs)) user_force_mp ?");

      if( avp_db_load("$(avp(dst_subs))","$(avp(user_force_mp))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Force MediaProxy for $(avp(dst_subs))");
          setflag(6); # force MP for callee
          add_rr_param(";mp=yes");
      }

      xlog("L_DBG","DEBUG -- route(try-line-side): dst_subs: $(avp(dst_subs)) src_type: $(avp(src_type))");

      # Coming from a phone that is allowed local calling
      if($(avp(src_type)) == "ONNET" && avp_db_load("$(avp(src_subs))","$(avp(allow_onnet))"))
      {
          route(line-side-invite); # Route towards line-side
          exit;
      }

      # Coming from the PSTN
      if($(avp(src_type)) == "PSTN")
      {
          route(line-side-invite); # Route towards line-side
          exit;
      }

      # Failure
      xlog("L_DBG","DEBUG -- route(try-line-side): dst_subs: $(avp(dst_subs)) call cannot be completed");
      sl_send_reply("404", "Call cannot be completed");
      exit;
  }
}

# Route towards line-side
route[line-side-invite]
{
    xlog("L_DBG","DEBUG -- route(line-side-invite) Routing to line-side");

    # Force to use the external socket info, if any.
    ${FORCE_EXTERNAL}

    # If CFA is enabled, go that way
    if( $(avp(cfa)) )
    {
        xlog("L_DBG","DEBUG -- CFA = $(avp(cfa))");

        # CFA AVP is a full URI
        $ru = $(avp(cfa));
        route(media-proxy-in-ruri);
        route(update-media-proxy);   # Start MP if needed
        route(initial-forwarder);
        exit;
    }

    # Save the original username in case we need it.
    $var(a) = $rU;

    # Use the regular destination username
    # NumUser AVP only gives the username.
    $rU = $(avp(dst_subs));

    # Locate the username if available (REGISTERed).
    route(lookup);

    # This is going to one of our users, ring them.
    route(update-media-proxy);   # Start MP if needed
    route(initial-forwarder);
    exit;
}

route[static-line-side]
{
  xlog("L_DBG","DEBUG -- route(static-line-side)");
  if( $(avp(cfnr)) )
  {
      xlog("L_DBG","DEBUG -- route(static-line-side) Using CFNR");
      $ru = $(avp(cfnr));
      route(media-proxy-in-ruri);  # CFNR may contain ";mp=yes"
      route(update-media-proxy);   # Start MP if needed
  }
  else
  {
      if( avp_db_load("$(avp(dst_subs))","$(avp(user_srv))") )
      {
          xlog("L_DBG","DEBUG -- route(static-line-side) Using user_srv");
          $ru = "sip:" + $var(a) + "@" + $(avp(user_srv));
          $rp = ""; # Clear port
          route(media-proxy-in-ruri);  # "user_srv" may contains extra parameters, including ";mp=yes"
          route(update-media-proxy);   # Start MP if needed
      }
      else
      if( avp_db_load("$(avp(dst_subs))","$(avp(user_ip))") )
      {
          xlog("L_DBG","DEBUG -- route(static-line-side) Using user_ip");
          $ru = "sip:" + $var(a) + "@" + $(avp(user_ip));
          if( avp_db_load("$(avp(dst_subs))","$(avp(user_port))") )
          {
              $ru = "sip:" + $var(a) + "@" + $(avp(user_ip)) + ":" + $(avp(user_port));
          }
      }
      else
      {
          xlog("L_DBG","DEBUG -- route(static-line-side) Not found");
          sl_send_reply("404", "Not Found");
          exit;
      }
      if( avp_db_load("$(avp(dst_subs))","$(avp(strip_digit))") )
      {
        strip(1);
      }
  }
}

