These are notes taken during development. The final choices are outlined at the end of this file.

framework
- nginx for aggregation of modules
- I18N, L10N: use CCNQ::Portal and the macros in CCNQ::Portal::I18N
- jQuery available
- authentication: internal (e.g. CouchDB), Authen::Simple (::LDAP), BitCard, OpenID..
- CGI::Session, CGI::Session::Auth

CGI::Application::Plugin::Session? CGI::Application::Plugin::Authentication ?

Also, CGI::Framework offers localization in the HTML templates
  (could be used to replace my own CCNQ::Portal::Formatter)
  (which itself shouldn't exist since there is CGI::FormBuilder -- which does client-side validation)

Contenders for forms:
  CGI::FormBuilder  (esp. CGI::FormBuilder::Multi !)
  HTML::FormHandler (relies on Moose, and is linked to Catalyst.. probably too much overhead for me)

   see also CGI::FormBuilderX::More
   Mango::Form uses CGI::FormBuilder and FormValidator::Simple

Mango provides a nice layout for the classes:
  Mango::User
  Mango::Profile
  etc.
.. coming from Handel, apparently.
Uses Data::Currency

  OpenID::Lite, Net::OpenID


-> Outcome: see portal/README:

  The inner layer will probably rely on CGI::FormBuilder; need to be able to provide both HTML (localized) and JSON (non-localized) output.

  The outer layer will use a combination of different tools; the idea is that it can be customized to a specific organizations' needs with minimum effort.

-> I think I'll use Dancer. Sessions will be either stored in memcached (using Dancer::Session::Memcached) or cookies (Dancer::Session::Cookie).
   Server-side we're using Dancer::Handler::PSGI.

UPDATE:

.. CGI::FormBuilder is no longer maintained. (Also it doesn't use "label" etc.) FormFu is too unstable. Remaining options:
- bring my Form creation stuff into a module that includes validation, etc. Recreate FormBuiler. :(
- use static forms with Template::Toolkit and "use loc" forinternationalization. (Remember: internationalization is required at least for labels and error messages, both client and server-side.)
(The issue with that is still validation: difficult to cross javascript validation with Perl server-side validation.)

* One solution for I18N is to generate the JavaScript validation code using TT as well and use the I18N functions inside that code as well.
* See http://plugins.jquery.com/project/validate for possible client-side validation.

.. so server-side I'm going to end up writing generic code for validation (hashref to hashref), suitable for direct JSON interfacing.
   Also need another interface (input) to do normalization (e.g. when asking for a date).
   Then the templating (Dancer::Template::TemplateToolkit) takes care of display.

