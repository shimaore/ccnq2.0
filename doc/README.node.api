[This document was last updated 2010-03-20 and is considered current.]

This is the specification for the API service which allows an external
process (e.g. portal) to query or update data inside the system.

Mostly this service can be viewed as an HTTP to XMPP gateway for request
submission, and a CouchDB database query tool.

The code for the API service is located in CCNQ::Actions::* ; see the file
"Callbacks.txt" for more information on these modules.

The API service is located at a "well-known" contact point specified as

  CCNQ::API::api_rendezvous_host      '127.0.0.1'
  CCNQ::API::api_rendezvous_port      9090

Note that the API service is therefor normally not reachable from
outside an "api"-type node, which is why "api" and "portal" types
must be co-located. (Eventually this restriction will be lifted.)

-- Creating a new Request --

New requests are inserted into the system using

  /api/${action}/${cluster_name}

This type of request is sent over to the "manager" process which then
uses the logic in ${SRC}/manager/actions to dispatch the Request into
one or more Activities.

The ${action} must be one of actions specified in

  ${SRC}/manager/requests/${action}_query.pm    for GET
  ${SRC}/manager/requests/${action}_update.pm   for PUT
  ${SRC}/manager/requests/${action}_delete.pm   for DELETE

The response is a JSON hash containing at least the following:

  {
    request => ${request_id}
  }

Note that since GET queries do not return immediately (they merely
create a new request for data in the system), other API services are
available to query data in a more real-time fashion.

-- Tracking a Request --

The following API service provides information about the status of
requests.

  /request/${request_id}      (GET)

The response is a CouchDB view response which describes the original request,
the (eventually empty) series of activities submitted to the different clusters
(numbered from 0 upward), and the (eventually empty) series of responses
received from the different hosts in each cluster. Note that the rows are
sorted in the proper order to ease reporting:

  Request
   +-> Activity
       +-> Response

The outline of the API JSON reply is therefor:

  {
    rows => [
      { doc => $request_hash, id => "${request_id}" },
      { doc => $activity_hash, id=> "${request_id}.0" },
      { doc => $response_hash, id=> "${request_id}.0.${host_name_1}" },
      { doc => $response_hash, id=> "${request_id}.0.${host_name_2}" },
      { doc => $activity_hash, id=> "${request_id}.1" },
      { doc => $response_hash, id=> "${request_id}.1.${host_name_3}" },
      { doc => $activity_hash, id=> "${request_id}.2" },
      ....
    ]
  }

Where:

  $request_hash contains at a minimum the parameters of the original request.

  $activity_hash contains at a minimum:
    {
      activity      => "${request_id}.${sequential_index}",
      activity_rank => ${sequential_index},
      cluster_name  => $cluster_name,
      params        => $params_hash,
    }
  Content of the $params_hash is provided by the request business logic code (e.g.
  as found in CCNQ::Manager::Requests::*).

  $response_hash contains at a minimum the content of the $activity_hash, plus
  either
  - a field called "error" if an error occurred during the processing of
    the activity, or
  - an optional field called "result" if the activity was successful and
    returned a result.
  Note that success of the submittal is indicated by the absence of the "error"
  field. Additionally a field called "status" is provided that contains either
  "completed" or "failed", but is only provided as a textual hint.

-- Querying the provisioning database --

The following API service allows to query the provisioning database
directly using views.

  /provisioning/${design_name}/${view_name}/${key1}/${key2}/..   (GET)

The CouchDB views are all designed to return keys formatted as
  [${key1},${key2},...]
