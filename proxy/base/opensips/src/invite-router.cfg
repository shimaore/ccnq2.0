# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[invite-handler]
{
    xlog("L_DBG","DEBUG -- route(invite-handler) $ru -- INVITE Message Handler");

    sl_send_reply("100", "Trying");

    t_on_failure("1");
    t_on_reply("1");

    xlog("L_DBG","DEBUG -- route(invite-handler): From ip: $si - From URI: $fu");

    route(pre-route-invite);
    route(mid-route-invite);

    route(try-line-side);
    route(try-trunk-side);

    # Invalid destination
    sl_send_reply("404", "User Not Found");
    exit;
}

# Route towards line-side
route[line-side-invite]
{
    xlog("L_DBG","DEBUG -- route(line-side-invite) Routing to line-side");

    # If CFA is enabled, go that way
    if( $(avp(cfa)) )
    {
        xlog("L_DBG","DEBUG -- CFA = $(avp(cfa))");

        # CFA AVP is a full URI
        $ru = $(avp(cfa));
        # Note: we can't do NAT detection on a CFA
        route(update-media-proxy);   # Start MP if needed
        route(initial-forwarder);
        exit;
    }

    # Save the original username in case we need it.
    $var(a) = $rU;

    # Use the regular destination username
    # NumUser AVP only gives the username.
    $rU = $(avp(dst_subs));

    # Locate the username if available (REGISTERed).
    route(lookup);

    # This is going to one of our users, ring them.
    route(update-media-proxy);   # Start MP if needed
    route(initial-forwarder);
    exit;
}

route[pre-route-invite]
{
  # -- Provider-side (top)
  if (allow_trusted())
  {
      # A trusted device is a provider-side trunk, including a local gateway (S2S).
      $(avp(src_type)) = "PSTN";
  }
  # -- Line-side
  else
  if($(avp(src_subs)))
  {
      $(avp(src_type)) = "ONNET";

      if( (! isflagset(16))
           && avp_db_load("$(avp(src_subs))","$(avp(dest_domain))") )
      {
          setflag(16);
      }
      if( avp_db_load("$(avp(src_subs))","$(avp(user_force_mp))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Force MediaProxy for $(avp(src_subs))");
          setflag(7); # force MP for caller
          add_rr_param(";mp=yes");
      }

      # Account headers
      avp_delete("$(avp(account))");
      avp_delete("$(avp(account_sub))");
      if(avp_db_load("$(avp(src_subs))","$(avp(account))")) {
        avp_db_load("$(avp(src_subs))","$(avp(account_sub))");
      }
      route(build-account-headers);
      #/ Account headers

      xlog("L_DBG","DEBUG -- route(invite-handler): Customer device $(avp(src_subs)) with account $(avp(account)).");
  }
}


