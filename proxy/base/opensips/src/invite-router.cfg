# invite-router.cfg -- INVITE handler for a generic router
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# -----------------------------------------------------------------
# INVITE Message Handler
# -----------------------------------------------------------------

route[invite-handler]
{
    xlog("L_DBG","DEBUG -- route(invite-handler) $ru -- INVITE Message Handler");

    sl_send_reply("100", "Trying");

    t_on_failure("1");
    t_on_reply("1");

    xlog("L_DBG","DEBUG -- route(invite-handler): From ip: $si - From URI: $fu");

    route(lookup-src);
    route(lookup-aliases);

    route(try-line-side);
    route(try-trunk-side);

    # Invalid destination
    sl_send_reply("404", "User Not Found");
    exit;
}

route[static-line-side]
{
  if( $(avp(cfnr)) )
  {
      $ru = $(avp(cfnr));
  }
  else
  {
      if( avp_db_load("$(avp(dst_subs))","$(avp(user_srv))") )
      {
          $ru = "sip:" + $var(a) + "@" + $(avp(user_srv));
          $rp = ""; # Clear port
      }
      else
      if( avp_db_load("$(avp(dst_subs))","$(avp(user_ip))") )
      {
          $ru = "sip:" + $var(a) + "@" + $(avp(user_ip));
          if( avp_db_load("$(avp(dst_subs))","$(avp(user_port))") )
          {
              $ru = "sip:" + $var(a) + "@" + $(avp(user_ip)) + ":" + $(avp(user_port));
          }
      }
      else
      {
          sl_send_reply("404", "Not Found");
          exit;
      }
      if( avp_db_load("$(avp(dst_subs))","$(avp(strip_digit))") )
      {
        strip(1);
      }
  }
}

route[lookup-src]
{
  # -- Provider-side (top)
  if (allow_trusted())
  {
      # A trusted device is a provider-side trunk, including a local gateway (S2S).
      $(avp(src_type)) = "PSTN";
  }
  # -- Line-side
  else
  if($(avp(src_subs)))
  {
      $(avp(src_type)) = "ONNET";

      if( (! isflagset(16))
           && avp_db_load("$(avp(src_subs))","$(avp(dest_domain))") )
      {
          setflag(16);
      }
      if( avp_db_load("$(avp(src_subs))","$(avp(user_force_mp))") )
      {
          xlog("L_DBG","DEBUG -- route(invite-handler): Force MediaProxy for $(avp(src_subs))");
          setflag(7); # force MP for caller
          add_rr_param(";mp=yes");
      }

      # Account headers
      avp_delete("$(avp(account))");
      avp_delete("$(avp(account_sub))");
      if(avp_db_load("$(avp(src_subs))","$(avp(account))")) {
        avp_db_load("$(avp(src_subs))","$(avp(account_sub))");
      }
      #/ Account headers

      xlog("L_DBG","DEBUG -- route(invite-handler): Customer device $(avp(src_subs)) with account $(avp(account)).");
  }
}


