# mediaproxy.cfg -- handler for MediaProxy (SDP with NAT)
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Media-Proxy handling routes

route[start-media-proxy]
{
    xlog("L_DBG","DEBUG -- route(start-media-proxy) -- Start Media Proxy");

    if(! ${MP_ALLOWED})
    {
        xlog("L_DBG","DEBUG -- route(start-media-proxy) Media Proxy relaying is not allowed.");
        return;
    }

    xlog("L_DBG","DEBUG -- route(start-media-proxy) -- Using Media Proxy");
    if( use_media_proxy() )
    {
        xlog("L_DBG","DEBUG -- route(start-media-proxy): use_media_proxy OK");
        setbflag(8);
        setflag(8);
    } else {
        xlog("L_ERR","ERROR -- route(start-media-proxy): use_media_proxy failed");
    }
}

route[stop-media-proxy]
{
    xlog("L_DBG","DEBUG -- route(stop-media-proxy) -- Tear down Proxy");

    if(! ${MP_ALLOWED})
    {
        xlog("L_DBG","DEBUG -- route(stop-media-proxy) Media proxy is not allowed.");
        return;
    }

    if(isflagset(8) || isbflagset(8))
    {
      end_media_session();
      resetbflag(8);
      resetflag(8);
    }
}

# -----------------------------------------------------------------
# Reply-codes handler for NAT traversal
# -----------------------------------------------------------------

route[media-proxy-reply-handler] # Reply handler for MediaProxy
{
    # Update the mediaproxy information if needed.
    if(t_check_status("180|183|2[0-9][0-9]"))
    {
        route(update-media-proxy);  # Update media session
    }
    # Don't tear-down on error, we might fail over.
}

route[update-media-proxy]
{
    xlog("L_DBG","DEBUG -- route(update-media-proxy) -- Start Media Proxy if needed");

    if( check_route_param("mp=yes") )
    {
      xlog("L_DBG","DEBUG -- route(update-media-proxy) -- Route indicates MP was activated");
      setflag(7);
    }

    if( ${MP_ALWAYS} ||
        isbflagset(8) || isflagset(8) ||                # Update the existing mediaproxy session
        isflagset(6) || isbflagset(6) || isflagset(7)   # None exist, but one is needed
      )
    {
      if( search("^Content-Length:")
          && !search("^Content-Length:[ ]*0")
        )
      {
        route(start-media-proxy);
      }
      else
      {
        xlog("L_DBG","DEBUG -- route(update-media-proxy) -- Media Proxy required but no SDP found");
      }
    }
    else
    {
      xlog("L_DBG","DEBUG -- route(update-media-proxy) -- Skipping Media Proxy");
    }
}
