# authenticate.cfg -- authenticate INVITE or REGISTER
# Copyright (C) 2009  Stephane Alnet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
route[authenticate]
{
  if(!allow_trusted()) # Note: INVITE also adds allow_source_address("2") and allow_source_address("0")
  {
      route(authenticate_check); # Authenticate customer
  }
}

# -----------------------------------------------------------------
# UAC Authentication (customer-side, "untrusted")
# -----------------------------------------------------------------

route[authenticate_check]
{
    xlog("L_DBG","DEBUG -- route(authenticate_check): Customer device from $si");

    #IF_AUTH_RADIUS   if(0) {
    #IF_AUTH_DB       if(0) {
              sl_send_reply("500","Internal error at authenticate");
    #IF_AUTH_RADIUS   }
    #IF_AUTH_DB       }

    # Check whether this is a customer-side trunk (S2S).
    if(!avp_db_load("$si","$(avp(src_subs))"))
    {
        xlog("L_DBG","DEBUG -- route(authenticate): Authorizing source $si");

#IF_AUTH_RADIUS   if (!radius_proxy_authorize("${CHALLENGE}"))
#IF_AUTH_RADIUS   {
#IF_AUTH_RADIUS       proxy_challenge("${CHALLENGE}","0");
#IF_AUTH_RADIUS       exit;
#IF_AUTH_RADIUS   }

#IF_AUTH_DB       if (!proxy_authorize("${CHALLENGE}","subscriber"))
#IF_AUTH_DB       {
#IF_AUTH_DB           $var(code) = $retcode;
#IF_AUTH_DB           xlog("L_DBG","DEBUG -- route(authenticate): proxy_authorize failed: $var(code)");
#IF_AUTH_DB           proxy_challenge("${CHALLENGE}","0");
#IF_AUTH_DB           exit;
#IF_AUTH_DB       }

        consume_credentials();

        if (!check_from())
        {
            sl_send_reply("403", "Use From=Authentication-ID");
            exit;
        }

        $(avp(src_subs)) = $fU;
    }

    xlog("L_DBG","DEBUG -- route(authenticate): Customer device $(avp(src_subs)) with account $(avp(account)).");
}

route[authenticate_register]
{
  xlog("L_DBG","DEBUG -- route(authenticate_register): Customer device from $si");

  #IF_AUTH_RADIUS   if(0) {
  #IF_AUTH_DB       if(0) {
    sl_send_reply("500","Internal error at authenticate_register");
    exit;
  #IF_AUTH_RADIUS   }
  #IF_AUTH_DB       }

  #IF_AUTH_RADIUS   if (!radius_www_authorize("${CHALLENGE}")) {
  #IF_AUTH_RADIUS       xlog("L_DBG", "route(register-handler) -- Device $si ($fu) failed to register");
  #IF_AUTH_RADIUS       www_challenge("${CHALLENGE}","0");
  #IF_AUTH_RADIUS       exit;
  #IF_AUTH_RADIUS   }

  #IF_AUTH_DB       if (!www_authorize("${CHALLENGE}","subscriber"))
  #IF_AUTH_DB       {
  #IF_AUTH_DB           xlog("L_DBG", "route(register-handler) -- Device $si ($fu) failed to register");
  #IF_AUTH_DB           www_challenge("${CHALLENGE}","0");
  #IF_AUTH_DB           exit;
  #IF_AUTH_DB       };

  consume_credentials();

}

# Syntax:
#  www_authorize(realm,sqltable) -- for user credentials (in REGISTER)
#  www_challenge(realm,qop)
#  proxy_authorize(realm,sqltable) -- require digest in INVITE
#  proxy_challenge(realm,qop)
